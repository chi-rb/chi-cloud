#!/bin/sh

sites_path=/etc/nginx/sites-enabled
site_path=$sites_path/cloud
conf_path=/etc/nginx/conf.d
proxy_path=$conf_path/proxy.conf

registry=$(cat <<CONF
location / {
  include /etc/nginx/conf.d/proxy.conf;
  proxy_pass http://registry.default.svc.cluster.local:5000;
}
CONF
)

http=$(cat <<CONF
listen 80;
CONF
)

if [ $CLOUD_CONTEXT = local ]; then
	cat <<-CONF > $site_path
		server {
		  server_name $CLOUD_REGISTRY_HOST;
			$http
		  $registry
		}

		server {
		  server_name cloud;
		  $http

		  location ~ /([0-9a-z\-\_]+)/([0-9a-z\-\_]+).* {
		    resolver 10.43.0.10;
		    include $proxy_path;
		    proxy_pass http://rails.\$1-\$2.svc.cluster.local;
		  }
		}
	CONF
else
	server_name=.$CLOUD_DOMAIN
	letsencrypt_path=/etc/letsencrypt/live/$CLOUD_DOMAIN
	cert_path=$letsencrypt_path/fullchain.pem
	key_path=$letsencrypt_path/privkey.pem

	if [ $CLOUD_HOST = $CLOUD_DOMAIN ]; then
		redirect_domain=www.$CLOUD_DOMAIN
	else
		redirect_domain=$CLOUD_DOMAIN
	fi

	redirect=$(cat <<-CONF
		return 301 https://$CLOUD_HOST\$request_uri;
	CONF
	)

	https=$(cat <<-CONF
		listen 443 ssl http2;
		ssl_certificate $cert_path;
		ssl_certificate_key $key_path;
	CONF
	)

	cat <<-CONF > $site_path
		server {
		  server_name $server_name;
		  $http
		  $redirect
		}

		server {
		  server_name $redirect_domain;
		  $https
		  $redirect
		}

		server {
		  server_name $CLOUD_REGISTRY_HOST;
		  $https
		  $registry
		}

		server {
		  server_name $server_name;
		  $https

		  location / {
		    resolver 10.43.0.10;
		    include $proxy_path;
    		set \$pod http://rails.$CLOUD_NAME-production.svc.cluster.local;
		    proxy_pass \$pod;
		  }
		}
	CONF

	issue-cert
fi

nginx -g 'daemon off;'
