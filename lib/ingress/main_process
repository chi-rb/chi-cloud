#!/bin/sh

local_path=/usr/local
bin_path=$local_path/sbin/nginx
etc_path=$local_path/etc/nginx
proxy_path=$etc_path/proxy.conf
ingress_path=$etc_path/ingress.conf
ssl_path=/ssl

build_name() {
	echo "~^(?<app>.+)\-$1\.$naked_domain$"
}

add_rails() {
	cat <<-CONF >> $ingress_path
		server {
		  server_name $1;
	CONF
	if [ $ssl = true ]; then
		cat <<-CONF >> $ingress_path
			$https
		CONF
	else
		cat <<-CONF >> $ingress_path
			$http
		CONF
	fi
	cat <<-CONF >> $ingress_path

		  location / {
		    include $proxy_path;
		    set \$wanted_host $2;
		    proxy_pass http://\$wanted_ip:$3;
		  }
		}

	CONF
}

cert_valid() {
	openssl x509 \
	-checkend 86400 \
	-noout \
	-in $cert_path
}

case $1 in
reload)
	$bin_path -s reload
;;
*)
	if [ $CLOUD_CONTEXT = local ]; then
		naked_domain=$SERVER_DOMAIN
		server_name="~^(?<app>.+)\-(?<env>.+)\.$naked_domain$"
		main_domain="\$app-\$env.$naked_domain"
		ssl=true
		ssl_path=/ssl
		cert_path=$ssl_path/fullchain.pem
		key_path=$ssl_path/privkey.pem
	else
		if [ -z $SERVER_DOMAIN ]; then
			ssl=false
			server_name=_
		else
			server_name=$SERVER_DOMAIN
			main_domain=$server_name
			if (echo $server_name | grep -q '^www\.'); then
				redirect_domain=$(echo $server_name | sed 's/^www\.//')
				naked_domain=$redirect_domain
			else
				redirect_domain=www.$server_name
				naked_domain=$server_name
			fi
			ssl=true
			letsencrypt_path=/usr/local/etc/letsencrypt
			live_path=$letsencrypt_path/live/$naked_domain
			cert_path=$live_path/fullchain.pem
			key_path=$live_path/privkey.pem
		fi
	fi

	redirect=$(cat <<-CONF
		  return 301 https://$main_domain\$request_uri;
	CONF
	)

	http=$(cat <<-CONF
		  listen 80;
	CONF
	)

	https=$(cat <<-CONF
		  listen 443 ssl http2;
		  ssl_certificate $cert_path;
		  ssl_certificate_key $key_path;
	CONF
	)

	cat <<-CONF > $ingress_path
		include /usr/local/etc/nginx/hosts.map;

	CONF

	if [ $ssl = true ]; then
		cat <<-CONF >> $ingress_path
			server {
			  server_name $server_name;
			$http
			$redirect
			}

		CONF
	fi

	if [ $CLOUD_CONTEXT = local ]; then
		add_rails $(build_name development) \$app-development-rails 80
		add_rails $(build_name test) \$app-development-rails 3000
		add_rails $(build_name '(?<env>.+)') \$app-\$env-rails 80
	else
		if [ $ssl = true ]; then
			cat <<-CONF >> $ingress_path
				server {
				  server_name $redirect_domain;
				$https
				$redirect
				}

			CONF
		fi
		add_rails $server_name rails 80
	fi

	if [ $CLOUD_CONTEXT = local ] || [ -z $SERVER_DOMAIN ]; then
		cert_path=$ssl_path/fullchain.pem
		key_path=$ssl_path/privkey.pem
		req_path=/tmp/req.cnf

		mkdir -p $ssl_path
		cat <<-SSL > $req_path
			[req]
			distinguished_name = req_distinguished_name
			x509_extensions = v3_req
			prompt = no

			[req_distinguished_name]
			C = UY
			ST = MA
			L = Punta del Este
			O = Chi
			OU = IT
			CN = *.$naked_domain

			[v3_req]
			keyUsage = critical, digitalSignature, keyAgreement
			extendedKeyUsage = serverAuth
			subjectAltName = @alt_names

			[alt_names]
			DNS.1 = *.$naked_domain
		SSL

		if [ ! -f $cert_path ] || ! cert_valid; then
			openssl req \
			-nodes \
			-sha256 \
			-x509 \
			-days 365 \
			-newkey rsa:2048 \
			-out $cert_path \
			-keyout $key_path \
			-config $req_path

			rm $req_path
		fi
	elif [ $ssl = true ]; then
		if [ -d $live_path ]; then
			certbot renew
		else
			certbot certonly \
			--standalone \
			-d $naked_domain \
			-n \
			--agree-tos \
			--email $SERVER_MAIL
		fi
	fi

	$bin_path -g 'daemon off;'
;;
esac
