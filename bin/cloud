#!/bin/sh

hosts_path=/etc/hosts
bin_path=/usr/local/bin
cloud_path=$bin_path/cloud
rails_pod=rails

agent_name=com.cloud
agent_filename=$agent_name.plist

tmp_path=/tmp/chi-cloud
tmp_repo_path=$tmp_path/repo
tmp_base_path=$tmp_path/base
tmp_cloud_path=$tmp_base_path/cloud
tmp_conf_path=$tmp_path/conf

exports_path=/etc/exports
exports_home_path=/System/Volumes/Data$HOME

s3_url=https://chi-rb.s3.amazonaws.com
s3_initrd_url=$s3_url/initrd
s3_vmlinuz_url=$s3_url/vmlinuz
s3_disk_url=$s3_url/disk.img.xz

repo_path=/usr/local/cloud
repo_app_path=$repo_path/app
repo_base_path=$repo_app_path/base
repo_vm_path=$repo_path/vm
repo_initrd_path=$repo_vm_path/initrd
repo_vmlinuz_path=$repo_vm_path/vmlinuz
repo_disk_path=$repo_vm_path/disk.img.xz
repo_bin_path=$repo_path/bin
repo_xhyve_path=$repo_bin_path/xhyve

user_cloud_path=$HOME/.cloud
user_conf_path=$user_cloud_path/conf
user_auth_path=$user_cloud_path/auth.json
user_disk_path=$user_cloud_path/disk.img
user_agent_path=$HOME/Library/LaunchAgents/$agent_filename

vm_user=hacker
vm_name=cloud
vm_mem=4G
vm_cpus=4

k3s_latest_url=https://github.com/rancher/k3s/releases/latest
k3s_path=/usr/local/bin/k3s

net_setting_names=(
	mac_ip
	vm_ip
)
user_setting_names=(
	vm_mem
	vm_cpus
)
user_setting_descs=(
	'Virtual machine memory'
	'Virtual machine cpus'
)

ok() {
	if [ "$beginned" = true ]; then
		echo Ok
	fi
}

complete() {
	ok
	if [ "$beginned" = true ]; then
		echo
	fi
	echo Complete
}

error() {
	echo $@ >&2
	exit 1
}

begin() {
	ok
	if [ "$beginned" = true ]; then
		echo
	fi
	echo "~> $@"
	beginned=true
}

correct() {
	echo "Correct (Y/n)? \c"
	read yn
	if [ "$yn" = n ]; then
		return 1
	fi
}

gen_id() {
	echo $(uuidgen | tr '[:upper:]' '[:lower:]')
}

set_app_paths() {
	if [ ! -z "$1" ]; then
		if [ ${1:0:1} = / ]; then
			app_path=$1
		else
			app_path=$PWD/$1
		fi
	else
		app_path=$PWD
	fi
	app_cloud_path=$app_path/cloud
	app_tmp_path=$app_path/tmp/cloud
	app_apply_path=$app_tmp_path/apply
	app_secret_path=$app_apply_path/secret.yml
	app_namespace_path=$app_apply_path/namespace.yml
	app_kustomization_path=$app_apply_path/kustomization.yml
	app_envs_path=$app_cloud_path/envs
	app_base_path=$app_envs_path/base
	app_dev_path=$app_envs_path/development
	app_prod_path=$app_envs_path/production
	app_build_path=$app_cloud_path/build
	app_deploy_path=$app_cloud_path/deploy
	app_snippets_path=$app_deploy_path/snippets
	app_samples_path=$app_tmp_path/samples
	app_sample_paths=(
		config/puma.rb
		config/database.yml
		config/cable.yml
		test/test_helper.rb
		test/application_system_test_case.rb
	)
}

configure() {
	indexes=${!user_setting_names[@]}
	for i in $indexes; do
		desc=${user_setting_descs[$i]}
		value=${!user_setting_names[$i]}
		echo $desc: $value
	done
	if ! correct; then
		echo
		for i in $indexes; do
			desc=${user_setting_descs[$i]}
			name=${user_setting_names[$i]}
			value=${!user_setting_names[$i]}
			echo $desc: $value
			if ! correct; then
				echo "Enter new value: \c"
				read $name
			fi
			echo
		done
		touch $user_conf_path
		for i in $indexes; do
			name=${user_setting_names[$i]}
			value=${!user_setting_names[$i]}
			sudo sed -i '' "/$name/d" $user_conf_path
			echo $name=$value >> $user_conf_path
		done
		configure
	fi
}

authorize() {
	echo "Enter username: \c"
	read auth_user
	echo "Enter password: \c"
	read -s auth_pass
}

net_settings_exists() {
	if [ -f $user_conf_path ]; then
		for name in ${net_setting_names[@]}; do
			if cat $user_conf_path | grep $name >/dev/null 2>&1; then
				return 0
			fi
		done
		return 1
	else
		return 1
	fi
}

vm_running() {
	sudo launchctl list | grep $agent_name >/dev/null 2>&1
}

host_exists() {
	sudo grep $vm_name $hosts_path >/dev/null 2>&1
}

export_exists() {
	test -f $exports_path && sudo grep $exports_home_path $exports_path >/dev/null 2>&1
}

vm_ssh() {
	ssh -tq \
	-o 'ConnectTimeout=10' \
	-o 'ControlMaster=auto' \
	-o 'ControlPersist=600' \
	-o 'ControlPath=/tmp/%r@%h' \
	-o 'UserKnownHostsFile=/dev/null' \
	-o 'StrictHostKeyChecking=no' \
	$vm_user@$vm_name $@
}

wait_ssh() {
	while :; do
		vm_ssh exit
		if [ $? -eq 0 ]; then
			break
		else
			echo Waiting ssh to be ready
			sleep 30
		fi
	done
}

vm_kubectl() {
	vm_ssh sudo kubectl $@
}

app_kubectl() {
	cmd=$@
	if [ ! -z $app_id ]; then
		cmd="-n $app_id $cmd"
	fi
	vm_kubectl $cmd
}

find_pod() {
	echo $(app_kubectl get pod -l "name=$1" -o jsonpath='{.items[0].metadata.name}')
}

pod_exec() {
	name=$1
	shift
	app_kubectl exec -it $(find_pod $name) -- $@
}

app_cloud_exists() {
	test -d "$app_cloud_path"
}

load_app() {
	set_app_paths
	app_env_name=${RAILS_ENV:-development}
	app_env=$app_env_name
	ensure_app_env $app_env_name
	. "$app_base_path"
	. "$app_env_path"
	app_id=$app_name-$app_env_name
}

ensure_app() {
	if ! app_cloud_exists; then
		error No cloud folder found
	fi
}

unknown() {
	if [ ! -z $1 ]; then
		echo "Unknown command \`$1\` \n"
	fi
}

app_env_exists() {
	if [ ! -z $1 ]; then
		app_env_path=$app_envs_path/$1
		if [ ! -f "$app_env_path" ]; then
			return 1
		fi
	else
		error No environment specified
	fi
}

ensure_app_env() {
	ensure_app
	if ! app_env_exists $1; then
		error Environment $1 not exists
	fi
}

compile_tpl() {
	tpl_output=$(cat "$1")
	name=$3
	tpl_subs=$(grep -o '{{ [a-z_. ]* }}' "$1" | uniq)
	while read tpl_sub; do
		tpl_sub_args=( $(echo $tpl_sub | sed 's/{{ //' | sed 's/ }}//') )
		case $tpl_sub in
		{{\ render\ *)
			render_path=${tpl_sub_args[1]}
			render_vars=("${tpl_sub_args[@]:2}")
			for render_var in $render_vars; do
				declare $render_var
			done
			render_snippet_path=$app_snippets_path/$render_path.yml
			tpl_sub_value=$(compile_tpl "$render_snippet_path" $2 $3 | sed 's/\//\\\//g' | tr '\n' '\r')
			tpl_output=$(echo "$tpl_output" | sed "s/$tpl_sub/$tpl_sub_value/g" | tr '\r' '\n' | sed '/^$/d')
		;;
		*)
			tpl_sub_name=${tpl_sub_args[0]}
			tpl_prefixed_sub_name=${2}_${tpl_sub_name}
			if [ ! -z "${!tpl_prefixed_sub_name}" ]; then
				tpl_normalized_sub_name=$tpl_prefixed_sub_name
			elif [ ! -z "${!tpl_sub_name}" ]; then
				tpl_normalized_sub_name=$tpl_sub_name
			else
				error $tpl_sub undefined, compiling $1 in $app_env_name
			fi
			tpl_sub_value=$(echo ${!tpl_normalized_sub_name} | sed 's/\//\\\//g')
			tpl_output=$(echo "$tpl_output" | sed "s/$tpl_sub/$tpl_sub_value/g")
		;;
		esac
	done <<-EOF
		$(echo "$tpl_subs")
	EOF
	echo "$tpl_output"
}

compile_tpls() {
	app_target_path=$app_cloud_path/$1
	if [ "$1" = deploy ]; then
		tpl_root_paths=("$app_target_path/base" "$app_target_path/$app_env_name")
	else
		tpl_root_paths=("$app_target_path")
	fi
	for ri in ${!tpl_root_paths[@]}; do
		tpl_root_path="${tpl_root_paths[$ri]}"
		tpl_paths=()
		tpl_names=()
		tpl_pod_names=()
		tpl_matches=$(find "$tpl_root_path" -type f -name '*.yml')
		while read tpl_path; do
			tpl_paths+=("$tpl_path")
		done <<-EOF
			$(echo "$tpl_matches")
		EOF
		for ti in ${!tpl_paths[@]}; do
			tpl_path=${tpl_paths[$ti]}
			tpl_relative_path=${tpl_path#$tpl_root_path/}
			tpl_name=$(basename "$tpl_path")
			if [ "$tpl_relative_path" = $tpl_name ]; then
				tpl_name=$(echo $tpl_name | sed 's/.yml//')
			else
				tpl_name=$(echo "$tpl_relative_path" | cut -d '/' -f1)
			fi
			tpl_name=$(echo $tpl_name | tr - _)
			tpl_names+=($tpl_name)
			if [ "$1" = build ]; then
				tpl_suffixed_name=${tpl_name}_build
			else
				tpl_suffixed_name=$tpl_name
			fi
			tpl_pod_name=$(echo $tpl_suffixed_name | tr _ -)
			tpl_pod_names+=($tpl_pod_name)
			declare "${tpl_name}_host=$tpl_pod_name"
		done
		for ti in ${!tpl_paths[@]}; do
			tpl_path=${tpl_paths[$ti]}
			tpl_name=${tpl_names[$ti]}
			tpl_pod_name=${tpl_pod_names[$ti]}
			tpl_tmp_path=$app_apply_path/${tpl_path#$app_cloud_path/}
			mkdir -p "$(dirname "$tpl_tmp_path")"
			echo "$(compile_tpl "$tpl_path" $tpl_name $tpl_pod_name)" >> "$tpl_tmp_path"
		done
	done
}

compile_statics() {
	cat <<-YML > "$app_secret_path"
		apiVersion: v1
		kind: Secret
		metadata:
		  name: docker
		  labels:
		    name: docker
		type: kubernetes.io/dockerconfigjson
		data:
		  .dockerconfigjson: $(cat $user_auth_path | base64)
	YML
	cat <<-YML > "$app_namespace_path"
		apiVersion: v1
		kind: Namespace
		metadata:
		  name: $app_id
		  labels:
		    name: $app_id
	YML
	escaped_app_apply_path=$(echo "$app_apply_path/" | sed 's/\//\\\//g')
	resources=$(find "$app_apply_path" -name '*.yml' | sed "s/$escaped_app_apply_path//g" | sed 's/^/  - /g')
	cat <<-YML > "$app_kustomization_path"
		namespace: $app_id
		resources:
		$resources
	YML
}

compile_all() {
	rm -rf "$app_tmp_path/"*
	compile_tpls $1
	compile_statics
}

edit() {
	if [ -z $EDITOR ]; then
		echo Edit $1 to setup environment
	else
		$EDITOR $1
	fi
}

fallback_pod() {
	echo ${1:-$rails_pod}
}

cloud_install() {
	if [ ! -d $repo_path ]; then
		begin Cloning Repository
		mkdir -p $tmp_path
		git clone git@github.com:chi-rb/chi-cloud.git $tmp_repo_path
		sudo mv $tmp_repo_path $repo_path
	fi

	vm_install nested

	if [ ! -f $user_auth_path ]; then
		begin Authorizing hub.docker.com
		authorize
		cat <<-JSON > $user_auth_path
			{
			  "auths": {
			    "https://index.docker.io/v1/": {
			      "auth": "$(echo "$auth_user:$auth_pass\c" | base64)"
			    }
			  }
			}
		JSON
	fi

	if [ "$(which ruby)" != /usr/local/cloud/bin/ruby ]; then
		cat <<-DOC
			Add this into your shell rc file:
			PATH=/usr/local/cloud/bin:$PATH

			And then:
			. /shell-rc-path
		DOC
	fi

	complete
}

cloud_uninstall() {
	vm_uninstall nested

	if [ -d $user_cloud_path ]; then
		begin Removing Settings
		rm -rf $user_cloud_path
	fi

	if [ -d $repo_path ]; then
		begin Removing Cloud
		sudo rm -rf $repo_path
	fi

	complete
}

cloud_update() {
	begin Updating Repository
	current_path=$PWD
	cd $repo_path
	git pull
	repo_current_branch=$(git branch | cut -d ' ' -f2)
	repo_new_branch=${2:-master}
	if [ $repo_current_branch != $repo_new_branch ]; then
		git checkout $repo_new_branch
	fi
	cd "$current_path"

	complete
}

cloud_init() {
	db=postgres
	while getopts 'd:' o; do
		case "$o" in
		d)
			db=$OPTARG
			if [ "$db" != postgres ] && [ "$db" != mysql ]; then
				error Unknown database $db
			fi
		;;
		esac
	done
	shift $((OPTIND-1))

	set_app_paths "$@"

	if ! app_cloud_exists; then
		begin Using $db template
		mkdir -p $tmp_path
		rm -rf $tmp_base_path
		cp -r $repo_base_path $tmp_base_path
		patch_name=$db.patch
		patch_path=$tmp_path/$patch_name
		cp $repo_app_path/$patch_name $tmp_path
		patch -s -p0 -d $tmp_path < $patch_path
		rm $patch_path

		if [ ! -d "$app_path" ]; then
			begin Generating App Directory
			mkdir -p "$(dirname "$app_path")"
			mv $tmp_base_path "$app_path"
			git init "$app_path"
			note=false
		else
			begin Adding Cloud Directory
			mv $tmp_cloud_path "$app_cloud_path"
			mkdir -p "$app_samples_path"
			for sample_path in "${app_sample_paths[@]}"; do
				destination_path=$app_samples_path/$sample_path
				mkdir -p "$(dirname "$destination_path")"
				cp $tmp_base_path/$sample_path "$destination_path"
			done
			rm -rf $tmp_base_path
			note=true
		fi
	else
		error Already initialized
	fi

	begin Setting Application
	echo "Enter name: \c"
	read	app_name
	echo "app_name=$app_name" >> "$app_base_path"
	echo "Enter port: \c"
	read	rails_cluster_port
	echo "rails_cluster_port=$rails_cluster_port" >> "$app_dev_path"

	begin Setting Docker Repository
	echo "Enter rails repo: \c"
	read rails_repo
	echo "rails_repo=$rails_repo:\$app_env" >> "$app_base_path"

	complete

	if [ $note = true ]; then
		echo "\nNOTE: You might need to tweak a few files, try using tmp/cloud/samples as a guideline"
	fi
}

cloud_open() {
	load_app
	open "http://$vm_name:$rails_cluster_port"
}

cloud_bin() {
	set_app_paths
	full_path=$1
	name=$(basename $full_path)
	relative_path=bin/$name
	shift
	if app_cloud_exists; then
		if [ -f $relative_path ]; then
			cmd="$relative_path $@"
		else
			if [ ! -z "$1" ]; then
				cmd=$@
			else
				cmd=$name
			fi
		fi
		cloud_exec -- $cmd
	else
		$(which -a $name | grep -A 1 $full_path | tail -n 1) $@
	fi
}

cloud_destroy() {
	load_app

	begin Removing Namespace
	vm_kubectl delete namespace $app_id

	begin Removing Cloud Directory
	rm -rf "$app_cloud_path"

	complete
}

cloud_build() {
	load_app
	build_names=$(app_kubectl get pods --no-headers=true | awk '/-build/{ORS=" "; print $1}')
	if [ ! -z $build_names ]; then
		app_kubectl delete pods $build_names
	fi
	compile_all build
	vm_kubectl apply -k \"$app_apply_path\"
	ok

	echo "\nUse \`cloud log <pod-name>\` to see logs"
}

cloud_deploy() {
	load_app
	compile_all deploy
	vm_kubectl apply -k \"$app_apply_path\"
}

cloud_undeploy() {
	load_app
	app_kubectl delete --all deployments
}

cloud_restart() {
	load_app
	pod=$(fallback_pod $1)
	app_kubectl delete pod $(find_pod $pod)
}

cloud_shell() {
	load_app
	pod=$(fallback_pod $1)
	pod_exec $pod /bin/bash
}

cloud_attach() {
	load_app
	pod=$(fallback_pod $1)
	app_kubectl attach -it $(find_pod $pod)
}

cloud_tunnel() {
	load_app
	port=$(app_kubectl get service $1 --no-headers=true | awk '{ print $5 }' | sed 's/\/.*//')
	app_kubectl port-forward $(find_pod $1) $port:$port
}

cloud_exec() {
	load_app
	if [ $# -gt 2 ] && [ "$2" = -- ]; then
		pod=$1
		shift 2
	elif [ $# -gt 1 ] && [ "$1" = -- ]; then
		shift
	else
		error Wrong format
	fi
	pod=$(fallback_pod $pod)
	pod_exec $pod $@
}

cloud_status() {
	load_app
	if [ -z "$1" ]; then
		app_kubectl get pods
	else
		pod=$(fallback_pod $1)
		app_kubectl describe pod $(find_pod $pod)
	fi
}

cloud_log() {
	load_app
	pod=$(fallback_pod $1)
	app_kubectl logs -f $(find_pod $pod)
}

cloud_help() {
	unknown $1
	cat <<-DOC
		Usage: cloud <command> [options]
		Orchestrates Rails+Kubernetes Clouds.

		Available commands:
			install       Setups script
			uninstall     Unsetups script
			reinstall     Installs and uninstalls
			update [tag]  Updates script
			init [path]   Generates folder and initializes cloud
			destroy       Removes cloud folder and destroy cloud
			build         Builds docker images
			deploy        Deploys app into the cloud
			undeploy      Undeploys app from the cloud
			status [pod]  Prints status of pods (all by default)
			restart [pod] Restart pod (rails by default)
			shell [pod]   Opens bash shell in pod (rails by default)
			attach [pod]  Attachs into first process of pod (rails by default)
			tunnel pod    Creates temporary tunnel into pod
			exec [pod]    Executes shell command in pod (rails by default)
			open          Opens browser pointing to app
			log [pod]     Tails pod log (rails by default)
			envs          Manages environments
			vm            Manages virtual machine
			help          Prints documentation
	DOC
}

envs_list() {
	ensure_app
	list=$(ls -1 "$app_envs_path")
	if [ -z "$list" ]; then
		error No environments found
	else
		echo "$list"
	fi
}

envs_add() {
	ensure_app
	if app_env_exists $1; then
		error Environment $1 already exists
	else
		mkdir -p "$app_envs_path"
		touch "$app_env_path"
		cloud envs edit $1
	fi
}

envs_edit() {
	ensure_app_env $1
	edit "$app_env_path"
}

envs_remove() {
	ensure_app_env $1
	rm -f "$app_env_path"
}

envs_help() {
	unknown $1
	cat <<-DOC
		Usage: cloud envs <command> [options]

		Available commands:
			list          Lists envs
			add           Adds env
			edit          Edits env
			remove        Removes env
			help          Prints documentation
	DOC
}

vm_install() {
	if [ ! -d $repo_vm_path ]; then
		begin Dowloading Images
		mkdir $repo_vm_path
		curl -o $repo_initrd_path $s3_initrd_url
		curl -o $repo_vmlinuz_path $s3_vmlinuz_url
		curl -o $repo_disk_path $s3_disk_url
	fi

	if [ ! -f $user_agent_path ]; then
		vm_id=$(gen_id)
		mkdir -p $user_cloud_path
		echo "vm_id=$vm_id" >> $user_conf_path
		vm_config nested
	fi

	if [ ! -f $user_disk_path ]; then
		begin Creating Disk
		tar xJvf $repo_disk_path -C $user_cloud_path
	fi

	if ! net_settings_exists; then
		begin First Boot
		while :; do
			echo Waiting to receive ip
			cloud vm start
			mkdir -p $tmp_path
			nc -l 1234 > $tmp_conf_path & sleep 30; kill $! >/dev/null 2>&1
			if [ -z "$(cat $tmp_conf_path)" ]; then
				vm_stop
			else
				break
			fi
		done
		. $tmp_conf_path
		cat $tmp_conf_path >> $user_conf_path
		rm $tmp_conf_path
	fi

	if ! host_exists; then
		begin Adding Hostname
		echo $vm_ip $vm_name | sudo tee -a $hosts_path
	fi

	if ! export_exists; then
		begin Sharing Home Directory
		echo $exports_home_path -mapall=$(id -u) | sudo tee -a $exports_path
		sudo nfsd update
		wait_ssh
		vm_ssh sudo sh <<-SSH
			echo "$mac_ip:$exports_home_path\t$HOME\tnfs local_lock=all\t0 0" >> /etc/fstab
			mkdir -p $HOME
			mount $HOME
		SSH
	fi

	if [ "$1" != nested ]; then
		complete
	fi
}

vm_uninstall() {
	if vm_running; then
		begin Stopping Virtual Machine
		vm_stop
	fi

	if [ -f $user_agent_path ]; then
		begin Removing Agent
		sudo rm $user_agent_path
	fi

	if [ "$1" != nested ]; then
		if net_settings_exists; then
			begin Removing Network Settings
			for name in ${net_setting_names[@]}; do
				sudo sed -i '' "/$name/d" $user_conf_path
			done
		fi

		if [ -d $repo_vm_path ]; then
			begin Removing Virtual Machine
			rm -rf $repo_vm_path
			rm -rf $user_disk_path
		fi
	fi

	if host_exists; then
		begin Removing Hostname
		sudo sed -i '' "/$vm_name/d" $hosts_path
	fi

	if export_exists; then
		begin Unsharing Home Directroy
		escaped_exports_home_path=$(echo $exports_home_path | sed 's/\//\\\//g')
		sudo sed -i '' "/$escaped_exports_home_path/d" $exports_path
		sudo nfsd update
	fi

	if [ "$1" != nested ]; then
		complete
	fi
}

vm_config() {
	begin Choosing Configuration
	configure

	begin Installing agent
	mkdir -p $(dirname $user_agent_path)
	cat <<-XML | sudo tee $user_agent_path >/dev/null
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
		<plist version="1.0">
			<dict>
				<key>Label</key>
				<string>com.cloud</string>
				<key>ProgramArguments</key>
				<array>
					<string>$repo_xhyve_path</string>
					<string>-A</string>
					<string>-U</string>
					<string>$vm_id</string>
					<string>-c</string>
					<string>$vm_cpus</string>
					<string>-m</string>
					<string>$vm_mem</string>
					<string>-s</string>
					<string>0,hostbridge</string>
					<string>-s</string>
					<string>2,virtio-net</string>
					<string>-s</string>
					<string>4,virtio-blk,$user_disk_path</string>
					<string>-f</string>
					<string>kexec,$repo_vmlinuz_path,$repo_initrd_path,root=/dev/vda1 ro</string>
				</array>
				<key>RunAtLoad</key>
				<true/>
			</dict>
		</plist>
	XML

	if [ "$1" != nested ]; then
		vm_restart
		complete
	fi
}

vm_start() {
	sudo launchctl load -w $user_agent_path >/dev/null
}

vm_stop() {
	sudo launchctl unload -w $user_agent_path >/dev/null 2>&1
	while vm_running; do
		sleep 5
	done
}

vm_restart() {
	vm_stop
	vm_start
}

vm_exec() {
	if [ $# -gt 1 ] && [ "$1" = -- ]; then
		shift
	else
		error Wrong format
	fi
	vm_ssh $@
}

vm_update() {
	begin Updating Packages
	vm_ssh sudo sh <<-SSH
		apt update
		DEBIAN_FRONTEND=noninteractive apt upgrade -y
	SSH

	begin Updating K3S
	k3s_version_regex='v[0-9]+\.[0-9]+\.[0-9]+\+k3s.?[0-9]+'
	k3s_current_version=$(vm_ssh k3s -v | grep -oE $k3s_version_regex)
	k3s_latest_version=$(curl -s $k3s_latest_url | grep -oE $k3s_version_regex | head -n1)
	if [ -z $k3s_current_version ] || [ $k3s_current_version != $k3s_latest_version ]; then
		k3s_url="https://github.com/rancher/k3s/releases/download/$k3s_latest_version/k3s"
		vm_ssh sudo sh <<-SSH
			systemctl stop k3s
			curl -Lo $k3s_path $k3s_url
			chmod +x $k3s_path
			systemctl start k3s
		SSH
	else
		echo Already up to date
	fi

	complete
}

vm_help() {
	unknown $1
	cat <<-DOC
		Usage: cloud vm <command> [options]

		Available commands:
			install       
			uninstall     
			start         Boots virtual machine
			stop          Halts virtual machine
			restart       Stops and starts
			shell         Opens bash shell
			exec          Executes command
			update        Updates operating system
			help          Prints documentation
	DOC
}

if [ -f $user_conf_path ]; then
	. $user_conf_path
fi

case $1 in
install)

	cloud_install

;;
uninstall)

	cloud_uninstall

;;
update)

	cloud_update

;;
init)

	shift
	cloud_init "$@"

;;
open)

	cloud_open

;;
destroy)

	cloud_destroy

;;
bin)

	shift 
	cloud_bin $@

;;
envs)

	case $2 in
	''|list)

		envs_list

	;;
	add)

		envs_add $3

	;;
	edit)

		envs_edit $3

	;;
	remove)

		envs_remove $3

	;;
	help)

		envs_help

	;;
	*)

		envs_help $1

	;;
	esac

;;
build)

	cloud_build

;;
deploy)

	cloud_deploy

;;
undeploy)

	cloud_undeploy

;;
restart)

	cloud_restart $2

;;
shell)

	cloud_shell $2

;;
attach)

	cloud_attach $2

;;
tunnel)

	cloud_tunnel $2

;;
exec)

	shift
	cloud_exec $@

;;
status)

	cloud_status $2

;;
log)

	cloud_log $2

;;
vm)

	case $2 in
	install)

		vm_install

	;;
	uninstall)

		vm_uninstall

	;;
	config)

		vm_config

	;;
	start)

		vm_start

	;;
	stop)

		vm_stop

	;;
	restart)

		vm_restart

	;;
	shell)

		vm_ssh

	;;
	exec)

		shift 2
		vm_exec $@

	;;
	update)

		vm_update

	;;
	help)

		vm_help

	;;
	*)

		vm_help $2

	;;
	esac

;;
help)

	cloud_help

;;
*)

	cloud_help $1

;;
esac
